#!/usr/bin/env ruby

# Change working directory so Bundler can find Gemfile
THIS_FILE = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
Dir.chdir File.dirname(THIS_FILE)
require 'rubygems'
require 'bundler/setup'

require 'thor'
require 'yaml'
require 'json'
require 'socket'

require_relative '../music_client'

CONFIG = YAML.load_file(File.expand_path("../config.yml", __dir__))

class MusicControl < Thor
  no_commands do
    def send_request(request)
      conn = Bunny.new(:host => CONFIG["hostname"], :user => CONFIG["rabbit_user"], :password => CONFIG["rabbit_password"], 
        :automatically_recover => false)
      conn.start

      ch = conn.create_channel
      
      #puts " [x] Sending #{request.to_s}"
      client = MusicClient.new(ch, "musicbox")
      response = client.call(request)
      #puts " [.] Response: #{response}"
      ch.close
      conn.close
    end

    def ip 
      IPSocket.getaddress(Socket.gethostname)
    end
  end

  desc "url URL", "Plays song URL or adds it to queue"
  def url(url)
    say set_color "Be patcient, it takes time to convert...", :blue, :bold
    data = {type: "url", client: ip, url: url}
    send_request(JSON.generate(data))
  end

  desc "vol LEVEL", "Sets volume level +/-. Example: +10 increase volume by 10. 10 sets volume to level 10. -10 decreases volume by 10."
  def vol(level)
    case level
      when /^[+-]?[0-9]?[0-9]$/
        data = {type: "vol", client: ip, vol_level: level}
        send_request(JSON.generate(data))
      else
        say "only positive or negative numbers are permitted to use as argument"
    end
  end

  desc "what", "Print the information about the currently played file."
  def what
    data = {type: "info", client: ip}
    send_request(JSON.generate(data))
  end

  desc "next", "Play next song."
  def next
    data = {type: "next", client: ip}
    send_request(JSON.generate(data))
  end
  
  desc "previous", "Play previous song."
  def previous
    data = {type: "previous", client: ip}
    send_request(JSON.generate(data))
  end

  desc "pause", "Pause."
  def pause
    data = {type: "pause", client: ip}
    send_request(JSON.generate(data))
  end

  desc "unpause", "Unpause."
  def unpause
    data = {type: "unpause", client: ip}
    send_request(JSON.generate(data))
  end

  desc "stop", "Stop playing."
  def stop
    data = {type: "stop", client: ip}
    send_request(JSON.generate(data))
  end

  desc "clear", "Clear the playlist."
  def clear
    data = {type: "clear", client: ip}
    send_request(JSON.generate(data))
  end

  desc "random AMOUNT", "Adds AMOUNT of random songs from database to queue."
  def random(amount)
    data = {type: "random", client: ip, amount: amount}
    send_request(JSON.generate(data))
  end

  desc "song SONG_NAME", "Tries to play or add to queue existing song in music folder"
  def song(song_name)
    data = {type: "song", client: ip, search: song_name}
    send_request(JSON.generate(data))
  end

  desc "list", "Lists all songs in db."
  def list
    data = {type: "list", client: ip}
    send_request(JSON.generate(data))
  end

  desc "now", "Starts playing the first item on the playlist (if there is any songs in list)."
  def now
    data = {type: "play", client: ip}
    send_request(JSON.generate(data))
  end

  desc "destroy", "Delete song from server."
  def destroy
    data = {type: "destroy", client: ip}
    send_request(JSON.generate(data))
  end

  desc "state", "Shows mocp status"
  def state
    data = {type: "state", client: ip}
    send_request(JSON.generate(data))
  end
end
 
MusicControl.start(ARGV)
